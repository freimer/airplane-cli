package gentypes

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/MakeNowJust/heredoc"
	"github.com/airplanedev/cli/cmd/airplane/auth/login"
	"github.com/airplanedev/cli/pkg/api"
	"github.com/airplanedev/cli/pkg/cli"
	"github.com/airplanedev/cli/pkg/logger"
	"github.com/airplanedev/cli/pkg/utils"
	libapi "github.com/airplanedev/lib/pkg/api"
	"github.com/airplanedev/lib/pkg/build"
	"github.com/airplanedev/lib/pkg/runtime/typescript"
	"github.com/airplanedev/lib/pkg/utils/fsx"
	"github.com/pkg/errors"
	"github.com/spf13/cobra"
)

type config struct {
	root     *cli.Config
	taskSlug string
	envSlug  string
	fileName string
}

func New(c *cli.Config) *cobra.Command {
	var cfg = config{root: c}

	cmd := &cobra.Command{
		Use:   "gentypes slug",
		Short: "Generates types for Node.js task parameters",
		Long: `Generates TypeScript types for Node.js task parameters.
		If no task is provided, a file with types for all Node.js tasks is produced.
		If a task is provided, a file with types for that task is produced.`,
		Example: heredoc.Doc(`
			airplane gentypes
			airplane gentypes my_task
		`),
		PersistentPreRunE: utils.WithParentPersistentPreRunE(func(cmd *cobra.Command, args []string) error {
			return login.EnsureLoggedIn(cmd.Root().Context(), c)
		}),
		Args: cobra.MaximumNArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			if len(args) > 0 {
				cfg.taskSlug = args[0]
			}
			return run(cmd.Root().Context(), cfg)
		},
	}

	cmd.Flags().StringVar(&cfg.envSlug, "env", "", "The slug of the environment to query. Defaults to your team's default environment.")
	cmd.Flags().StringVar(&cfg.fileName, "file", "types.ts", "The file to save the generated types to.")

	return cmd
}

func run(ctx context.Context, cfg config) error {
	fileName := cfg.fileName
	if !strings.HasSuffix(fileName, ".ts") {
		fileName = fmt.Sprintf("%s.ts", fileName)
	}
	if fsx.Exists(fileName) {
		if ok, err := utils.Confirm(fmt.Sprintf("Would you like to overwrite %s?", fileName)); err != nil {
			return err
		} else if !ok {
			return nil
		}
	}
	wr, err := os.Create(fileName)
	if err != nil {
		errors.Wrapf(err, "creating file %s", fileName)
	}

	if err := genTypeScriptTypes(ctx, cfg.root.Client, cfg.envSlug, genTypeScriptTypesOpts{
		taskSlug: cfg.taskSlug,
		wr:       wr,
	}); err != nil {
		return err
	}

	if fileName != "" {
		logger.Log("Generated TypeScript types at %s", fileName)
	} else {
		logger.Log("Generated TypeScript types")
	}
	return nil
}

type genTypeScriptTypesOpts struct {
	taskSlug string
	wr       io.Writer
}

func genTypeScriptTypes(ctx context.Context, apiClient api.APIClient, envSlug string, opts genTypeScriptTypesOpts) error {
	var tasks []libapi.Task
	if opts.taskSlug != "" {
		task, err := apiClient.GetTask(ctx, libapi.GetTaskRequest{
			Slug:    opts.taskSlug,
			EnvSlug: envSlug,
		})

		if err != nil {
			return err
		}
		tasks = append(tasks, task)
	} else {
		tasksResp, err := apiClient.ListTasks(ctx, envSlug)
		if err != nil {
			return err
		}
		tasks = tasksResp.Tasks
	}

	var buff bytes.Buffer
	fmt.Fprint(&buff, "// Code generated by airplane tasks gentypes. DO NOT EDIT.\n\n")
	for _, task := range tasks {
		if task.Kind != build.TaskKindNode {
			continue
		}
		paramTypes := make(map[string]libapi.Type)
		for _, param := range task.Parameters {
			paramTypes[param.Slug] = param.Type
		}
		typescriptType, err := typescript.CreateParamsType(paramTypes, task.Name)
		if err != nil {
			return err
		}
		fmt.Fprint(&buff, typescriptType)
	}

	_, err := opts.wr.Write(buff.Bytes())

	return err
}
